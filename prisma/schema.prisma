// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  workflows Workflow[]
}

model Workflow {
  id          String   @id @default(cuid())
  name        String
  description String?
  isActive    Boolean  @default(true)
  trigger     String   // e.g., "http", "schedule", "webhook"
  config      String   // JSON configuration for trigger
  authorId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  author      User         @relation(fields: [authorId], references: [id], onDelete: Cascade)
  steps       WorkflowStep[]
  executions  Execution[]
}

model WorkflowStep {
  id         String   @id @default(cuid())
  order      Int
  name       String
  type       String   // e.g., "http_request", "email", "database", "condition"
  config     String   // JSON configuration for the step
  workflowId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  workflow   Workflow  @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  inputs     StepInput[]
  outputs    StepOutput[]
}

model StepInput {
  id     String @id @default(cuid())
  name   String
  type   String // e.g., "text", "number", "json", "file"
  value  String? // Default value or reference to previous step output
  stepId String
  
  step   WorkflowStep @relation(fields: [stepId], references: [id], onDelete: Cascade)
}

model StepOutput {
  id     String @id @default(cuid())
  name   String
  type   String // e.g., "text", "number", "json", "file"
  stepId String
  
  step   WorkflowStep @relation(fields: [stepId], references: [id], onDelete: Cascade)
}

model Execution {
  id          String            @id @default(cuid())
  status      ExecutionStatus   @default(PENDING)
  startedAt   DateTime          @default(now())
  completedAt DateTime?
  error       String?
  workflowId  String
  triggerData String?           // JSON data that triggered the execution
  
  workflow    Workflow          @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  logs        ExecutionLog[]
}

model ExecutionLog {
  id          String   @id @default(cuid())
  level       LogLevel @default(INFO)
  message     String
  data        String?  // JSON data
  stepId      String?  // Reference to the step that generated this log
  executionId String
  createdAt   DateTime @default(now())
  
  execution   Execution @relation(fields: [executionId], references: [id], onDelete: Cascade)
}

enum ExecutionStatus {
  PENDING
  RUNNING
  SUCCESS
  FAILED
  CANCELLED
}

enum LogLevel {
  DEBUG
  INFO
  WARN
  ERROR
}